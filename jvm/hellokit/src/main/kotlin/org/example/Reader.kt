/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import com.google.gson.JsonParser
import com.google.protobuf.util.JsonFormat
import org.example.protos.Hello
import org.example.protos.HelloSealed

object Reader {
    fun readJsonResource(): List<Hello> {
        val stream = this::class.java.getResourceAsStream("/hello_world.json")
            ?: throw IllegalArgumentException("Resource not found!")

        // Parse top-level JSON array using GSONâ€™s JsonParser
        val jsonArray = JsonParser.parseReader(stream.bufferedReader()).asJsonArray

        // Protobuf JsonFormat parser (for each Hello object)
        val parser = JsonFormat.parser()

        val result = mutableListOf<Hello>()
        for (element in jsonArray) {
            val helloBuilder = Hello.newBuilder()
            // element.toString() will be a JSON object string like:
            // { "_name": "default", "message": "...", "multiplier": ... }
            parser.merge(element.toString(), helloBuilder)
            result.add(helloBuilder.build())
        }

        return result
    }

    fun createHelloProto(): Hello = Hello
        .newBuilder()
        .setName("Example")
        .setMultiplier(1)
        .setMessage("Hello Travis")
        .build()
}

fun main() {
    // Protobuf Schema
    val protoModel = Reader.createHelloProto()
    println(protoModel)
    // Parsed Instances from Json
    val jsonContent = Reader.readJsonResource()
    println("JSON Content:\n$jsonContent")
    // Autogenerated sealed class based on JSON for type safety
    HelloSealed.all.forEach {
        println(it)
        println(it.hello)
    }
}
